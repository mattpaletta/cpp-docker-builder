FROM debian:stretch as build

RUN apt-get update && apt-get install --no-install-suggests --no-install-recommends -y \
  autoconf \
  automake \
  build-essential \
  cmake \
  curl \
  wget \
  g++ \
  git \
  libtool \
  make \
  pkg-config \
  unzip \
  ca-certificates \
  ninja-build \
  python3-pip \
  python3-dev \
  binutils \
# AWS SDK Depedencies
  libcurl4-openssl-dev \
  libssl-dev \
  uuid-dev \
  zlib1g-dev \
  libpulse-dev \
# Install Boost Dependencies
  liblzma-dev \
  libbz2-dev \
  libicu-dev \
# Install Additional C++ Dependencies
  libhiredis-dev \
  zlib1g-dev \
  libsasl2-dev \
  libzstd-dev \
  && apt-get clean

ARG NPROC=4
ENV BOOST_VERSION 1.72.0
ENV GRPC_RELEASE_TAG v1.27.3
ENV CMAKE_MAJOR_VERSION 3.17
ENV CMAKE_MINOR_VERSION 0
ENV LIBRDKAFKA_VERSION 1.3.0
ENV AWS_SDK_VERSION 1.7.306
ENV CPP_VERSION 17

################################
# Update CMake
################################
RUN curl https://cmake.org/files/v${CMAKE_MAJOR_VERSION}/cmake-${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}-Linux-x86_64.sh -o /cmake-${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}-Linux-x86_64.sh && \
	mkdir /opt/cmake && \
	sh /cmake-${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}-Linux-x86_64.sh --prefix=/opt/cmake --skip-license && \
	ln -s /opt/cmake/bin/cmake /usr/local/bin/cmake && \
	rm /cmake-${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}-Linux-x86_64.sh

################################
# Update clang
################################
ENV CLANG_ROOT /llvm-project
RUN git clone --depth 1 --recursive https://github.com/llvm/llvm-project.git && \
	mkdir -p $CLANG_ROOT/build && \
	cd $CLANG_ROOT/build && \
	cmake -GNinja -DLLVM_ENABLE_PROJECTS=clang -DLLVM_FORCE_USE_OLD_HOST_TOOLCHAIN=true -DLLVM_ENABLE_LIBCXX=ON -DLLVM_STATIC_LINK_CXX_STDLIB=ON -DLLVM_USE_LINKER=gold -DCMAKE_BUILD_TYPE=Release ../llvm && \
	cmake --build . && \
	cmake --build . --target install && \
	ldconfig && \
	cd / && \
	rm -rf llvm-project

RUN which clang

################################
# Update Boost
################################
RUN git clone --depth 1 --recursive -b boost-${BOOST_VERSION} https://github.com/boostorg/boost && \
    cd boost && \
	./bootstrap.sh --with-libraries=all --with-python=python3 && \
	CXX=clang++ CC=clang ./b2 install && \
	cd / && \
	rm -rf boost

###################################
# Install GRPC
###################################
RUN git clone -b ${GRPC_RELEASE_TAG} https://github.com/grpc/grpc /var/local/git/grpc && \
    cd /var/local/git/grpc && \
    git submodule update --init --recursive

RUN cd /var/local/git/grpc/third_party/protobuf && \
    ./autogen.sh && ./configure --enable-shared && \
    make -j${NPROC} && make -j${NPROC} check && make install && make clean && ldconfig

RUN cd /var/local/git/grpc && \
    make -j${NPROC} && make install && make clean && ldconfig

################################
# Install AWS SDK
################################
RUN cd / && git clone --depth 1 --recursive -b ${AWS_SDK_VERSION} https://github.com/aws/aws-sdk-cpp.git && \
	mkdir -p /aws-sdk-cpp/build && \
	cd /aws-sdk-cpp/build && \
	CXX=clang++ CC=clang cmake -GNinja -DCPP_STANDARD=${CPP_VERSION} .. && \
	cmake --build . && \
	cmake --build . --target install && \
	cd / && \
	rm -rf aws-sdk-cpp

